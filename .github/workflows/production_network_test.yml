name: Hyperledger_Scala_With_Production_Network

on:  
  # daily
  schedule:
    - cron: '0 0 * * *'
  # manual trigger
  workflow_dispatch:
    inputs:
      chaincode_target:
        description: 'Chaincode Target Branch'
        required: true
        default: 'develop'
      test_set:
        description: 'Define which tests to run'
        required: true
        default: '*ExaminationRegulationAccessTests *VersionAccessTests *UserManagementTests *InternalManagerTests *CertificateAccessTests *CertificateErrorTests *MatriculationErrorTests *MatriculationAccessTests *UnsignedTransactionTests *ApprovalTests'
  # on push event
  push:
    # except for these files
    paths-ignore:
      - README.md
      - LICENSE
      - CHANGELOG.md
      - .github/workflows/dev_network_test.yml
      - .github/workflows/no_network_test.yml
      - .github/workflows/style_check.yaml
      - .github/workflows/publish_to_sonatype.yaml
      - .github/actions/dev_network_setup/action.yml
  # on pull request to protected branches
  pull_request:
    branches: 
      - develop
      - main
    # except for these files
    paths-ignore:
      - README.md
      - LICENSE
      - CHANGELOG.md
      - .github/workflows/dev_network_test.yml
      - .github/workflows/no_network_test.yml
      - .github/workflows/style_check.yaml
      - .github/workflows/publish_to_sonatype.yaml
      - .github/actions/dev_network_setup/action.yml

jobs:

  DeployAndTestProductionNetwork:
    env:
      TEST_SET: "*ExaminationRegulationAccessTests *VersionAccessTests *UserManagementTests *InternalManagerTests *CertificateAccessTests *CertificateErrorTests *MatriculationErrorTests *MatriculationAccessTests *UnsignedTransactionTests *ApprovalTests"
      CHAINCODE_TARGET: "develop"

    runs-on: ubuntu-latest

    steps:
    # ################### ENV VARS ############################################################ #      
    # Rewrite test_Set if started manually
    - name: rewrite test_set if manual invocation
      if: github.event.inputs.test_set != ''
      run: echo "::set-env name=TEST_SET::${{ github.event.inputs.test_set }}"

    # Rewrite chaincodeTarget if started manually
    - name: rewrite chaincodeTarget if manual invocation
      if: github.event.inputs.chaincode_target != ''
      run: echo "::set-env name=CHAINCODE_TARGET::${{ github.event.inputs.chaincode_target }}"
    # ################### ENV VARS ############################################################ #

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Check out source repository
      uses: actions/checkout@v2

    # Set up JDK
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    # ################### PRODUCTION NETWORK ############ #
    # Checks out production network
    - name : Check out production network
      uses: actions/checkout@v2
      with:
        repository: 'upb-uc4/hlf-network'
        ref: 'develop'
        path: 'hlf-network'
        
    # Prepare mounts
    - name: Create folder for mounts of default cluster
      run: |
          sudo mkdir -p /data/development/hyperledger
          sudo chmod -R 777 /data/development

    # start kind
    - name: Start KinD with default cluster config
      uses: engineerd/setup-kind@v0.4.0
      with:
          version: "v0.7.0"
          config: hlf-network/assets/kind.yaml
    
    # install faketime
    - name: (Temporary) install faketime to prevent clockdrifts
      run: sudo apt-get install faketime

    # Setup Network
    - name: setup production network
      uses: ./.github/actions/production_network_setup
      with:
        network_folder: 'hlf-network'
        chaincode_branch: $CHAINCODE_TARGET

    # check nodes
    - name: Check kubernetes nodes
      run: kubectl get nodes -o wide

    # check kind worker ip
    - name: Check kind worker ip
      run: |
        printf "Using worker node at: %s\n" $UC4_KIND_NODE_IP
    # ################### PRODUCTION NETWORK ############ #

    # ################### TEST WITH REPORTS ############# #
    # Run Tests
    - name: run tests with coverage and reports
      uses: NikoBergemann/action-sbt-test-report@v1
      with:
        what-to-test: $TEST_SET
      env:
        Target: 'ProductionNetwork'

    # Combine reports
    - name: Scalatest multiproject HTML merger
      uses: bastihav/scalatest-multiproject-html-action@v1
      if: always()
      with:
        path: target/test_reports/

    # Upload Test Report
    - name: Upload test report
      uses: actions/upload-artifact@v1
      if: always()
      with:
        name: test-reports
        path: target/test_reports/

    # Upload Coverage Report
    - name: Upload coverage report
      uses: actions/upload-artifact@v1
      with:
        name: code-coverage
        path: target/scoverage-report
    # ################### TEST WITH REPORTS ############# #
